{
    "sourceFile": "models/gwcnet_dca4_g.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1735525605952,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1735525605952,
            "name": "Commit-0",
            "content": "from __future__ import print_function\nimport torch\nimport torch.nn as nn\nimport torch.utils.data\nfrom torch.autograd import Variable\nimport torch.nn.functional as F\nimport math\nfrom models.augment.cva_bn import cva\nfrom models.submodule_bn import *\n\n\nclass feature_extraction(nn.Module):\n    def __init__(self, concat_feature=True, concat_feature_channel=12):\n        super(feature_extraction, self).__init__()\n        self.concat_feature = concat_feature\n\n        self.inplanes = 32\n        self.firstconv = nn.Sequential(convbn(3, 32, 3, 2, 1, 1),\n                                       nn.ReLU(inplace=True),\n                                       convbn(32, 32, 3, 1, 1, 1),\n                                       nn.ReLU(inplace=True),\n                                       convbn(32, 32, 3, 1, 1, 1),\n                                       nn.ReLU(inplace=True))\n\n        self.layer1 = self._make_layer(BasicBlock, 32, 3, 1, 1, 1)\n        self.layer2 = self._make_layer(BasicBlock, 64, 16, 2, 1, 1)\n        self.layer3 = self._make_layer(BasicBlock, 128, 3, 1, 1, 1)\n        self.layer4 = self._make_layer(BasicBlock, 128, 3, 1, 1, 2)\n\n        if self.concat_feature:\n            self.lastconv = nn.Sequential(convbn(320, 128, 3, 1, 1, 1),\n                                          nn.ReLU(inplace=True),\n                                          nn.Conv2d(128, concat_feature_channel, kernel_size=1, padding=0, stride=1,\n                                                    bias=False))\n\n    def _make_layer(self, block, planes, blocks, stride, pad, dilation):\n        downsample = None\n        if stride != 1 or self.inplanes != planes * block.expansion:\n            downsample = nn.Sequential(\n                nn.Conv2d(self.inplanes, planes * block.expansion,\n                          kernel_size=1, stride=stride, bias=False),\n                nn.BatchNorm2d(planes * block.expansion), )\n\n        layers = []\n        layers.append(block(self.inplanes, planes, stride, downsample, pad, dilation))\n        self.inplanes = planes * block.expansion\n        for i in range(1, blocks):\n            layers.append(block(self.inplanes, planes, 1, None, pad, dilation))\n\n        return nn.Sequential(*layers)\n\n    def forward(self, x):\n        x = self.firstconv(x)\n        x = self.layer1(x)\n        l2 = self.layer2(x)\n        l3 = self.layer3(l2)\n        l4 = self.layer4(l3)\n\n        gwc_feature = torch.cat((l2, l3, l4), dim=1)\n\n        if not self.concat_feature:\n            return {\"gwc_feature\": gwc_feature}\n        else:\n            concat_feature = self.lastconv(gwc_feature)\n            return {\"gwc_feature\": gwc_feature, \"concat_feature\": concat_feature}\n\n\nclass hourglass(nn.Module):\n    def __init__(self, in_channels):\n        super(hourglass, self).__init__()\n\n        self.conv1 = nn.Sequential(convbn_3d(in_channels, in_channels * 2, 3, 2, 1),\n                                   nn.ReLU(inplace=True))\n\n        self.conv2 = nn.Sequential(convbn_3d(in_channels * 2, in_channels * 2, 3, 1, 1),\n                                   nn.ReLU(inplace=True))\n\n        self.conv3 = nn.Sequential(convbn_3d(in_channels * 2, in_channels * 4, 3, 2, 1),\n                                   nn.ReLU(inplace=True))\n\n        self.conv4 = nn.Sequential(convbn_3d(in_channels * 4, in_channels * 4, 3, 1, 1),\n                                   nn.ReLU(inplace=True))\n\n        self.conv5 = nn.Sequential(\n            nn.ConvTranspose3d(in_channels * 4, in_channels * 2, 3, padding=1, output_padding=1, stride=2, bias=False),\n            nn.BatchNorm3d(in_channels * 2))\n\n        self.conv6 = nn.Sequential(\n            nn.ConvTranspose3d(in_channels * 2, in_channels, 3, padding=1, output_padding=1, stride=2, bias=False),\n            nn.BatchNorm3d(in_channels))\n\n        self.redir1 = convbn_3d(in_channels, in_channels, kernel_size=1, stride=1, pad=0)\n        self.redir2 = convbn_3d(in_channels * 2, in_channels * 2, kernel_size=1, stride=1, pad=0)\n\n    def forward(self, x):\n        conv1 = self.conv1(x)\n        conv2 = self.conv2(conv1)\n\n        conv3 = self.conv3(conv2)\n        conv4 = self.conv4(conv3)\n\n        conv5 = F.relu(self.conv5(conv4) + self.redir2(conv2), inplace=True)\n        conv6 = F.relu(self.conv6(conv5) + self.redir1(x), inplace=True)\n\n        return conv6\n\n\nclass PropgationNet_4x(nn.Module):\n    def __init__(self, base_channels):\n        super(PropgationNet_4x, self).__init__()\n        self.base_channels = base_channels\n        self.conv = nn.Sequential(convbn(base_channels, base_channels * 2, 3, 1, 1, 1),\n                                  nn.ReLU(inplace=True),\n                                  nn.Conv2d(base_channels * 2, 9 * 16, kernel_size=(3, 3), stride=(1, 1), padding=1,\n                                            dilation=(1, 1), bias=False))\n\n    def forward(self, guidance, disp):\n        b, c, h, w = disp.shape\n        disp = F.unfold(4 * disp, [3, 3], padding=1).view(b, 1, 9, 1, 1, h, w)\n        mask = self.conv(guidance).view(b, 1, 9, 4, 4, h, w)\n        mask = F.softmax(mask, dim=2)\n        up_disp = torch.sum(mask * disp, dim=2)\n        up_disp = up_disp.permute(0, 1, 4, 2, 5, 3)\n        return up_disp.reshape(b, 1, 4 * h, 4 * w)\n\n\nclass PropgationNet_8x(nn.Module):\n    def __init__(self, base_channels):\n        super(PropgationNet_8x, self).__init__()\n        self.base_channels = base_channels\n        self.conv = nn.Sequential(convbn(base_channels, base_channels * 2, 3, 1, 1, 1),\n                                  nn.ReLU(inplace=True),\n                                  nn.Conv2d(base_channels * 2, 9 * 64, kernel_size=(3, 3), stride=(1, 1), padding=1,\n                                            dilation=(1, 1), bias=False))\n\n    def forward(self, guidance, disp):\n        b, c, h, w = disp.shape\n        disp = F.unfold(8 * disp, [3, 3], padding=1).view(b, 1, 9, 1, 1, h, w)\n        mask = self.conv(guidance).view(b, 1, 9, 8, 8, h, w)\n        mask = F.softmax(mask, dim=2)\n        up_disp = torch.sum(mask * disp, dim=2)\n        up_disp = up_disp.permute(0, 1, 4, 2, 5, 3)\n        return up_disp.reshape(b, 1, 8 * h, 8 * w)\n\n\nclass GwcNet(nn.Module):\n    def __init__(self, maxdisp, use_concat_volume=True):\n        super(GwcNet, self).__init__()\n        self.maxdisp = maxdisp\n        self.use_concat_volume = use_concat_volume\n\n        self.num_groups = 40\n        if self.use_concat_volume:\n            self.concat_channels = 12\n            self.feature_extraction = feature_extraction(concat_feature=True,\n                                                         concat_feature_channel=self.concat_channels)\n        else:\n            self.concat_channels = 0\n            self.feature_extraction = feature_extraction(concat_feature=False)\n\n        self.dres0 = nn.Sequential(convbn_3d(self.num_groups + self.concat_channels * 2, 32, 3, 1, 1),\n                                   nn.ReLU(inplace=True),\n                                   convbn_3d(32, 32, 3, 1, 1),\n                                   nn.ReLU(inplace=True))\n\n        self.dres1 = nn.Sequential(convbn_3d(32, 32, 3, 1, 1),\n                                   nn.ReLU(inplace=True),\n                                   convbn_3d(32, 32, 3, 1, 1))\n\n        self.cva1 = cva(self.maxdisp, 32, downsample=True)\n        self.cva2 = cva(self.maxdisp, 32, downsample=True)\n        self.cva3 = cva(self.maxdisp, 32, downsample=True)\n        self.cva4 = cva(self.maxdisp, 32, downsample=True)\n\n        self.classif0 = nn.Sequential(convbn_3d(32, 32, 3, 1, 1),\n                                      nn.ReLU(inplace=True),\n                                      nn.Conv3d(32, 1, kernel_size=3, padding=1, stride=1, bias=False))\n\n        self.classif1 = nn.Sequential(convbn_3d(32, 32, 3, 1, 1),\n                                      nn.ReLU(inplace=True),\n                                      nn.Conv3d(32, 1, kernel_size=3, padding=1, stride=1, bias=False))\n\n        self.classif2 = nn.Sequential(convbn_3d(32, 32, 3, 1, 1),\n                                      nn.ReLU(inplace=True),\n                                      nn.Conv3d(32, 1, kernel_size=3, padding=1, stride=1, bias=False))\n\n        self.classif3 = nn.Sequential(convbn_3d(32, 32, 3, 1, 1),\n                                      nn.ReLU(inplace=True),\n                                      nn.Conv3d(32, 1, kernel_size=3, padding=1, stride=1, bias=False))\n\n        self.classif4 = nn.Sequential(convbn_3d(32, 32, 3, 1, 1),\n                                      nn.ReLU(inplace=True),\n                                      nn.Conv3d(32, 1, kernel_size=3, padding=1, stride=1, bias=False))\n        \n        self.guidance = Guidance(64)\n        self.prop = PropgationNet_4x(64)\n\n        for m in self.modules():\n            if isinstance(m, nn.Conv2d):\n                n = m.kernel_size[0] * m.kernel_size[1] * m.out_channels\n                m.weight.data.normal_(0, math.sqrt(2. / n))\n            elif isinstance(m, nn.Conv3d):\n                n = m.kernel_size[0] * m.kernel_size[1] * m.kernel_size[2] * m.out_channels\n                m.weight.data.normal_(0, math.sqrt(2. / n))\n            elif isinstance(m, nn.BatchNorm2d):\n                m.weight.data.fill_(1)\n                m.bias.data.zero_()\n            elif isinstance(m, nn.BatchNorm3d):\n                m.weight.data.fill_(1)\n                m.bias.data.zero_()\n            # elif isinstance(m, nn.Linear):\n            #     m.bias.data.zero_()\n\n    def forward(self, left, right):\n        guidance = self.guidance(left)\n        features_left = self.feature_extraction(left)\n        features_right = self.feature_extraction(right)\n\n        gwc_volume = build_gwc_volume(features_left[\"gwc_feature\"], features_right[\"gwc_feature\"], self.maxdisp // 4,\n                                      self.num_groups)\n        if self.use_concat_volume:\n            concat_volume = build_concat_volume(features_left[\"concat_feature\"], features_right[\"concat_feature\"],\n                                                self.maxdisp // 4)\n            volume = torch.cat((gwc_volume, concat_volume), 1)\n        else:\n            volume = gwc_volume\n\n        del features_left, features_right\n\n        cost0 = self.dres0(volume)\n        cost0 = self.dres1(cost0) + cost0\n\n        del volume\n\n        #### augment cv ####\n        prob_volume1, augmented_cost = self.cva1(cost0)\n        out1 = cost0 + augmented_cost\n\n        prob_volume2, out2 = self.cva2(out1)\n        prob_volume3, out3 = self.cva3(out2)\n        prob_volume4, out4 = self.cva4(out3)\n        \n        # cu\n        out4 = self.classif4(out4)\n        # cost2 = F.upsample(out2, scale_factor=(4, 4, 4), mode='trilinear')\n        cost4 = torch.squeeze(out4, 1)\n        cost4 = F.softmax(cost4, dim=1)\n        pred4 = disparity_regression(cost4, self.maxdisp//4)\n        pred4 = self.prop(guidance['g'], pred4)\n\n        if self.training:\n            out0 = self.classif0(cost0)\n            out0 = F.upsample(out0, scale_factor=(4, 4, 4), mode='trilinear')\n            out0 = torch.squeeze(out0, 1)\n            pred0 = F.softmax(out0, dim=1)\n            pred0 = disparity_regression(pred0, self.maxdisp)\n\n            out1 = self.classif1(out1)\n            out1 = F.upsample(out1, scale_factor=(4, 4, 4), mode='trilinear')\n            cost1 = torch.squeeze(out1, 1)\n            pred1 = F.softmax(cost1, dim=1)\n            pred1 = disparity_regression(pred1, self.maxdisp)\n\n            out2 = self.classif2(out2)\n            out2 = F.upsample(out2, scale_factor=(4, 4, 4), mode='trilinear')\n            cost2 = torch.squeeze(out2, 1)\n            pred2 = F.softmax(cost2, dim=1)\n            pred2 = disparity_regression(pred2, self.maxdisp)\n            \n            out3 = self.classif3(out3)\n            out3 = F.upsample(out3, scale_factor=(4, 4, 4), mode='trilinear')\n            cost3 = torch.squeeze(out3, 1)\n            pred3 = F.softmax(cost3, dim=1)\n            pred3 = disparity_regression(pred3, self.maxdisp)\n            \n            out_dca1 = F.upsample(prob_volume1, scale_factor=(8, 8, 8), mode='trilinear')\n            out_dca1 = torch.squeeze(out_dca1, 1)\n            pred_dca1 = F.softmax(out_dca1, dim=1)\n            pred_dca1 = disparity_regression(pred_dca1, self.maxdisp)\n\n            out_dca2 = F.upsample(prob_volume2, scale_factor=(8, 8, 8), mode='trilinear')\n            out_dca2 = torch.squeeze(out_dca2, 1)\n            pred_dca2 = F.softmax(out_dca2, dim=1)\n            pred_dca2 = disparity_regression(pred_dca2, self.maxdisp)\n\n            out_dca3 = F.upsample(prob_volume3, scale_factor=(8, 8, 8), mode='trilinear')\n            out_dca3 = torch.squeeze(out_dca3, 1)\n            pred_dca3 = F.softmax(out_dca3, dim=1)\n            pred_dca3 = disparity_regression(pred_dca3, self.maxdisp)\n            \n            out_dca4 = F.upsample(prob_volume4, scale_factor=(8, 8, 8), mode='trilinear')\n            out_dca4 = torch.squeeze(out_dca4, 1)\n            pred_dca4 = F.softmax(out_dca4, dim=1)\n            pred_dca4 = disparity_regression(pred_dca4, self.maxdisp)\n            # pred2 = disparity_regression(pred2, self.maxdisp)\n\n            return [ pred_dca1.squeeze(1), pred_dca2.squeeze(1),\n                   pred_dca3.squeeze(1), pred_dca4.squeeze(1),\n                   pred0.squeeze(1), pred1.squeeze(1), pred2.squeeze(1), pred3.squeeze(1), \n                   pred4.squeeze(1)]\n\n        else:\n            return pred4, prob_volume4.squeeze(1)\n\n"
        }
    ]
}